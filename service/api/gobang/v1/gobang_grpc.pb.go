// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.17.3
// source: gobang/v1/gobang.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// GobangClient is the client API for Gobang service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GobangClient interface {
	Register(ctx context.Context, in *RegisterReq, opts ...grpc.CallOption) (*RegisterReply, error)
	Login(ctx context.Context, in *LoginReq, opts ...grpc.CallOption) (*RegisterReply, error)
	RoomCreate(ctx context.Context, in *RoomRequest, opts ...grpc.CallOption) (*RoomReply, error)
}

type gobangClient struct {
	cc grpc.ClientConnInterface
}

func NewGobangClient(cc grpc.ClientConnInterface) GobangClient {
	return &gobangClient{cc}
}

func (c *gobangClient) Register(ctx context.Context, in *RegisterReq, opts ...grpc.CallOption) (*RegisterReply, error) {
	out := new(RegisterReply)
	err := c.cc.Invoke(ctx, "/gobang.v1.Gobang/Register", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gobangClient) Login(ctx context.Context, in *LoginReq, opts ...grpc.CallOption) (*RegisterReply, error) {
	out := new(RegisterReply)
	err := c.cc.Invoke(ctx, "/gobang.v1.Gobang/Login", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gobangClient) RoomCreate(ctx context.Context, in *RoomRequest, opts ...grpc.CallOption) (*RoomReply, error) {
	out := new(RoomReply)
	err := c.cc.Invoke(ctx, "/gobang.v1.Gobang/RoomCreate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GobangServer is the server API for Gobang service.
// All implementations must embed UnimplementedGobangServer
// for forward compatibility
type GobangServer interface {
	Register(context.Context, *RegisterReq) (*RegisterReply, error)
	Login(context.Context, *LoginReq) (*RegisterReply, error)
	RoomCreate(context.Context, *RoomRequest) (*RoomReply, error)
	mustEmbedUnimplementedGobangServer()
}

// UnimplementedGobangServer must be embedded to have forward compatible implementations.
type UnimplementedGobangServer struct {
}

func (UnimplementedGobangServer) Register(context.Context, *RegisterReq) (*RegisterReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Register not implemented")
}
func (UnimplementedGobangServer) Login(context.Context, *LoginReq) (*RegisterReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Login not implemented")
}
func (UnimplementedGobangServer) RoomCreate(context.Context, *RoomRequest) (*RoomReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RoomCreate not implemented")
}
func (UnimplementedGobangServer) mustEmbedUnimplementedGobangServer() {}

// UnsafeGobangServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GobangServer will
// result in compilation errors.
type UnsafeGobangServer interface {
	mustEmbedUnimplementedGobangServer()
}

func RegisterGobangServer(s grpc.ServiceRegistrar, srv GobangServer) {
	s.RegisterService(&Gobang_ServiceDesc, srv)
}

func _Gobang_Register_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GobangServer).Register(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gobang.v1.Gobang/Register",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GobangServer).Register(ctx, req.(*RegisterReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gobang_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GobangServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gobang.v1.Gobang/Login",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GobangServer).Login(ctx, req.(*LoginReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gobang_RoomCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RoomRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GobangServer).RoomCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gobang.v1.Gobang/RoomCreate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GobangServer).RoomCreate(ctx, req.(*RoomRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Gobang_ServiceDesc is the grpc.ServiceDesc for Gobang service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Gobang_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "gobang.v1.Gobang",
	HandlerType: (*GobangServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Register",
			Handler:    _Gobang_Register_Handler,
		},
		{
			MethodName: "Login",
			Handler:    _Gobang_Login_Handler,
		},
		{
			MethodName: "RoomCreate",
			Handler:    _Gobang_RoomCreate_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "gobang/v1/gobang.proto",
}
